import * as dotenv from "dotenv";
dotenv.config(); // ALWAYS BE FIRST!

import { autoRetry } from "@grammyjs/auto-retry";
import { ParseModeFlavor, hydrateReply } from "@grammyjs/parse-mode";
import { Context, Bot, BotError, GrammyError, HttpError } from "grammy";
import { Menu, MenuFlavor } from "@grammyjs/menu";

import FixMarkdown from "./fix";
import { escapers } from "@telegraf/entity";

export type BotContext = ParseModeFlavor<Context> & MenuFlavor;

const bot = new Bot<BotContext>(process.env.BOT_TOKEN!);

bot.api.config.use(autoRetry());

bot.api.setMyCommands([
  { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
  { command: "ass", description: "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∂–æ–ø—ã" },
  { command: "md", description: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" },
]);

bot.api.setMyDescription("–ë–æ—Ç SwiftSoft");

bot.use(hydrateReply);

let assOpen: boolean = false;

const assStatus = () => `–ñ–æ–ø–∞ ${assOpen ? "üü¢ –æ—Ç–∫—Ä—ã—Ç–∞" : "üî¥ –∑–∞–∫—Ä—ã—Ç–∞"}`;

const initAss = (ctx: BotContext) => {
  ctx.reply(assStatus(), { reply_markup: menu, parse_mode: "MarkdownV2" });
};
const menu = new Menu("mainMenu", {
  autoAnswer: false,
  onMenuOutdated: async (ctx) => {
    await ctx.answerCallbackQuery({
      text: assStatus(),
    });
    await ctx.editMessageText(assStatus(), {
      reply_markup: menu,
      parse_mode: "MarkdownV2",
    });
    return true;
  },
}).text(
  () => (assOpen ? "–ó–∞–∫—Ä—ã—Ç—å –∂–æ–ø—É" : "–û—Ç–∫—Ä—ã—Ç—å –∂–æ–ø—É"),
  async (ctx) => {
    assOpen = !assOpen;

    await ctx.answerCallbackQuery({
      text: assStatus(),
    });

    try {
      await ctx.editMessageText(assStatus(), { parse_mode: "MarkdownV2" });
    } catch (_) {}
  }
);

bot.use(menu);

bot.command("start", (ctx) => {
  ctx.reply(
    "*–ü–æ—á–µ–º—É —á–µ—à–µ—Ç—Å—è –∂–æ–ø–∞?*\n–û–±—ã—á–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –≥–ª–∏—Å—Ç—ã\n```\n–ø–∏–∑–¥–µ—Ü —Ç—ã –¥–∞—É–Ω```",
    {
      parse_mode: "MarkdownV2",
    }
  );
});

bot.command("ass", initAss);

bot.hears(/(md|markdown|marked|mark) *(.+)?/ms, async (ctx) => {
  const match = ctx.match[2];
  try {
    await ctx.reply(
      match
        ? FixMarkdown(match)
            .replace(/^#+(.+)$/gm, "*$1*")
            .replace(/-/g, "\\-")
            .replace(/\./g, "\\.")
            .replace(/\(/g, "\\(")
            .replace(/\)/g, "\\)")
        : `*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* /${ctx.match[1]} _—Ç–µ–∫—Å—Ç_`,
      {
        parse_mode: "MarkdownV2",
      }
    );
  } catch (e) {
    if (e instanceof GrammyError)
      ctx.replyWithMarkdownV2(
        `üö´ *–û—à–∏–±–∫–∞: *\n\`\`\`${escapers.MarkdownV2(e.description)}\`\`\``
      );
  }
});

function errorHandler(err: BotError<BotContext>) {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
}

bot.catch(errorHandler);

bot.start();
