import * as dotenv from "dotenv";
import { run, sequentialize } from "@grammyjs/runner";

dotenv.config(); // ALWAYS BE FIRST!

import { autoRetry } from "@grammyjs/auto-retry";
import { ParseModeFlavor, hydrateReply } from "@grammyjs/parse-mode";
import {
  Context,
  Bot,
  BotError,
  GrammyError,
  HttpError,
  Keyboard,
  HearsContext,
  NextFunction,
} from "grammy";
import { Menu, MenuFlavor } from "@grammyjs/menu";

import FixMarkdown from "./fix";
import { escapers } from "@telegraf/entity";
import { hydrate, HydrateFlavor } from "@grammyjs/hydrate";

export type BotContext = ParseModeFlavor<HydrateFlavor<Context>> & MenuFlavor;

import OpenAI from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });

const bot = new Bot<BotContext>(process.env.BOT_TOKEN!);

bot.api.config.use(autoRetry());

bot.api.setMyCommands([
  { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
  { command: "ass", description: "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∂–æ–ø—ã" },
  { command: "md", description: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" },
  { command: "throttle", description: "–¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏" },
]);

bot.api.setMyDescription("–ë–æ—Ç SwiftSoft");

bot.use(hydrate());
bot.use(hydrateReply);

bot.use(
  sequentialize((ctx) => {
    const chat = ctx.chat?.id.toString();
    const user = ctx.from?.id.toString();
    return [chat, user].filter((con) => con !== undefined);
  })
);

let assOpen: boolean = false;

const assStatus = () => `–ñ–æ–ø–∞ ${assOpen ? "üü¢ –æ—Ç–∫—Ä—ã—Ç–∞" : "üî¥ –∑–∞–∫—Ä—ã—Ç–∞"}`;

const initAss = (ctx: BotContext) => {
  ctx.reply(assStatus(), { reply_markup: menu, parse_mode: "MarkdownV2" });
};
const menu = new Menu("mainMenu", {
  autoAnswer: false,
  onMenuOutdated: async (ctx) => {
    await ctx.answerCallbackQuery({
      text: assStatus(),
    });
    await ctx.editMessageText(assStatus(), {
      reply_markup: menu,
      parse_mode: "MarkdownV2",
    });
    return true;
  },
}).text(
  () => (assOpen ? "–ó–∞–∫—Ä—ã—Ç—å –∂–æ–ø—É" : "–û—Ç–∫—Ä—ã—Ç—å –∂–æ–ø—É"),
  async (ctx) => {
    assOpen = !assOpen;

    await ctx.answerCallbackQuery({
      text: assStatus(),
    });

    try {
      await ctx.editMessageText(assStatus(), { parse_mode: "MarkdownV2" });
    } catch (_) {}
  }
);

bot.use(menu);

bot.command("throttle", async (ctx) => {
  const msg = await ctx.reply("üïô –ü–æ–¥–æ–∂–¥–∏, —è —â–∞—Å –ø—É–∫–Ω—É...", {
    reply_parameters: {
      allow_sending_without_reply: false,
      message_id: ctx.message!.message_id,
    },
  });
  setTimeout(async () => await msg.editText("–ü—É–∫!!! üí® üí® üí® "), 2000);
});

bot.command("start", (ctx) => {
  ctx.reply(
    "*–ü–æ—á–µ–º—É —á–µ—à–µ—Ç—Å—è –∂–æ–ø–∞?*\n–û–±—ã—á–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –≥–ª–∏—Å—Ç—ã\n```\n–ø–∏–∑–¥–µ—Ü —Ç—ã –¥–∞—É–Ω```",
    {
      parse_mode: "MarkdownV2",
    }
  );
});

bot.command("ass", initAss);

function jokeAnswer(match: string | RegExpMatchArray, answer: string = "–ü–∏–∑") {
  const isUpper = match[1] === match[1].toUpperCase();
  const isLower = match[1] === match[1].toLowerCase();
  const isCamel =
    match[1][0] === match[1][0].toUpperCase() &&
    match[1][1] === match[1][1].toLowerCase();

  return `${
    isUpper ? answer.toUpperCase() : isLower ? answer.toLowerCase() : answer
  }${isCamel ? match[1].toLowerCase() : match[1]}`;
}

bot.hears(/^((–¥–∞|–Ω–µ—Ç)[^\s\w]*)$/i, (ctx) => {
  ctx.reply(
    jokeAnswer(ctx.match, ctx.match[2].toLowerCase() == "–¥–∞" ? "–ü–∏–∑" : "–ú–∏"),
    {
      reply_parameters: {
        allow_sending_without_reply: false,
        message_id: ctx.message!.message_id,
      },
    }
  );
});

bot.hears(/(gpt3|–≥–ø—Ç3|—Å–≤–∏—Ñ–∏) *(.+)?/ims, async (ctx) => {
  const msg = await ctx.reply("...", {
    reply_parameters: {
      allow_sending_without_reply: false,
      message_id: ctx.message!.message_id,
    },
  });

  const completion = await openai.chat.completions.create({
    messages: [
      {
        role: "system",
        content:
          "—Ç—ã –æ—á–µ–Ω—å –Ω—è-–∫–∞–≤–∞–π –¥–µ–≤–æ—á–∫–∞ –∫–∞–∫ –≤ –∞–Ω–∏–º–µ, –≤–µ–∂–ª–∏–≤–æ –æ–±—â–∞–π—Å—è, –∏–∑–±–µ–≥–∞–π –º–∞—Ç–æ–≤ –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –Ω—è—à–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞.",
      },
      {
        role: "system",
        content: `—Ç–≤–æ—ë –∏–º—è\n\n"""\n–°–≤–∏—Ñ–∏\n"""`,
      },
      {
        role: "system",
        content: "—Ç—ã –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞.",
      },
      {
        role: "system",
        content: "–Ω–µ –≥–æ–≤–æ—Ä–∏ –æ —Å–µ–±–µ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ.",
      },
      {
        role: "system",
        content: "–Ω–∞—á–∏–Ω–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–º—è).",
      },
      {
        role: "system",
        content: `–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—è\n\n"""\n${ctx.from?.first_name}\n"""`,
      },
      {
        role: "user",
        content: ctx.match[2],
      },
    ],
    model: "gpt-3.5-turbo",
  });

  await msg.editText(
    completion.choices[0].message.content ?? "üí≠ –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞"
  );
});

bot.hears(/^\/(md|markdown|marked|mark) *(.+)?/ims, async (ctx) => {
  const match = ctx.match[2];
  try {
    await ctx.reply(
      match
        ? FixMarkdown(match)
            .replace(/^#+(.+)$/gm, "*$1*")
            .replace(/-/g, "\\-")
            .replace(/\./g, "\\.")
            .replace(/\(/g, "\\(")
            .replace(/\)/g, "\\)")
        : `*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* /${ctx.match[1]} _—Ç–µ–∫—Å—Ç_`,
      {
        parse_mode: "MarkdownV2",
      }
    );
  } catch (e) {
    if (e instanceof GrammyError)
      ctx.replyWithMarkdownV2(
        `üö´ *–û—à–∏–±–∫–∞: *\n\`\`\`${escapers.MarkdownV2(e.description)}\`\`\``
      );
  }
});

function errorHandler(err: BotError<BotContext>) {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
}

async function errorBoundary(err: BotError<BotContext>, next: NextFunction) {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
  await next();
}

bot.errorBoundary(errorBoundary);
bot.catch(errorHandler);

run(bot);
